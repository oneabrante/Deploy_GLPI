name: CI

on:
  pull_request: 
    branches:
      - master
  push:
    branches:
      - dev-k8s

env:
  glpi: abrantedevops/glpi_nginx:latest
  
  path_dockerfile: ./.docker/app


jobs:
    Build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Build Docker images
              run: |
                docker build -t ${{ env.glpi }} ${{ env.path_dockerfile }}
    
    Test-Services:
        needs: Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Run Docker images and check tests
              run: |
                docker run -d --name glpi -p 80:80 ${{ env.glpi }}
                docker ps
                echo "Start Container Test GLPI"
                container_status=$(docker inspect -f '{{.State.Status}}' glpi)
                if [ $? -eq 0 ]; then
                  echo -e "\033[92mContainer status: $container_status (OK)\033[0m"
                else
                  echo -e "\033[91mContainer status: $container_status (Falha)\033[0m"
                  exit 1
                fi
                echo "Start Test NGINX"
                docker ps
                nginx_status=$(docker exec glpi service nginx status)
                if [ $? -eq 0 ]; then
                  echo -e "\033[92mNGINX status: $nginx_status (OK)\033[0m"
                else
                  echo -e "\033[91mNGINX status: $nginx_status (Falha)\033[0m"
                  exit 1
                fi
                echo "Start Test PHP-FPM v8.3"
                docker ps
                php_status=$(docker exec glpi service php8.3-fpm status)
                if [ $? -eq 0 ]; then
                  echo -e "\033[92mPHP-FPM v8.3 status: $php_status (OK)\033[0m"
                else
                  echo -e "\033[91mPHP-FPM v8.3 status: $php_status (v8.3 is required)\033[0m"
                  exit 1
                fi


    Vulnerabilities:
        needs: Test-Services
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Install Trivy
              run: |
                wget https://github.com/aquasecurity/trivy/releases/download/v0.51.1/trivy_0.51.1_Linux-64bit.deb
                sudo dpkg -i trivy_0.51.1_Linux-64bit.deb

            - name: Scan Docker images
              run: |
                trivy image ${{ env.glpi }}
              
    Registry:
        needs: Vulnerabilities
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
        
            - name: Login to DockerHub
              uses: docker/login-action@v2.2.0
              with:
                username: ${{ secrets.USER }}
                password: ${{ secrets.PASS }}
        
            - name: Push Docker images
              run: |
                docker build -t ${{ env.glpi }} ${{ env.path_dockerfile }}
                docker push ${{ env.glpi }}
